# Generated by Django 5.0.7 on 2025-08-25 05:11

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Building',
            fields=[
                ('building_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=120)),
            ],
            options={
                'db_table': 'building',
            },
        ),
        migrations.CreateModel(
            name='Checklist',
            fields=[
                ('checklist_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'checklist',
            },
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('department_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=120)),
            ],
            options={
                'db_table': 'department',
            },
        ),
        migrations.CreateModel(
            name='Guest',
            fields=[
                ('guest_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('full_name', models.CharField(blank=True, max_length=160, null=True)),
                ('phone', models.CharField(blank=True, max_length=15, null=True)),
                ('email', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'db_table': 'guest',
            },
        ),
        migrations.CreateModel(
            name='GymMember',
            fields=[
                ('member_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('full_name', models.CharField(max_length=100)),
                ('phone', models.CharField(max_length=15)),
                ('email', models.CharField(blank=True, max_length=100, null=True)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('status', models.CharField(blank=True, max_length=50, null=True)),
                ('plan_type', models.CharField(blank=True, max_length=50, null=True)),
            ],
            options={
                'db_table': 'gym_member',
            },
        ),
        migrations.CreateModel(
            name='GymVisitor',
            fields=[
                ('visitor_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('full_name', models.CharField(max_length=100)),
                ('phone', models.CharField(blank=True, max_length=15, null=True)),
                ('email', models.CharField(blank=True, max_length=100, null=True)),
                ('registered_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'gym_visitor',
            },
        ),
        migrations.CreateModel(
            name='LocationFamily',
            fields=[
                ('family_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=120)),
            ],
            options={
                'db_table': 'location_family',
            },
        ),
        migrations.CreateModel(
            name='LocationType',
            fields=[
                ('type_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=120)),
            ],
            options={
                'db_table': 'location_type',
            },
        ),
        migrations.CreateModel(
            name='RequestFamily',
            fields=[
                ('request_family_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=120)),
            ],
            options={
                'db_table': 'request_family',
            },
        ),
        migrations.CreateModel(
            name='UserGroup',
            fields=[
                ('group_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=120)),
            ],
            options={
                'db_table': 'user_group',
            },
        ),
        migrations.CreateModel(
            name='Users',
            fields=[
                ('user_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('full_name', models.CharField(max_length=160)),
                ('email', models.CharField(blank=True, max_length=160, null=True)),
                ('phone', models.CharField(blank=True, max_length=15, null=True)),
                ('title', models.CharField(blank=True, max_length=120, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('department', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app1.department')),
            ],
            options={
                'db_table': 'users',
            },
        ),
        migrations.CreateModel(
            name='WorkFamily',
            fields=[
                ('work_family_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=120)),
            ],
            options={
                'db_table': 'work_family',
            },
        ),
        migrations.CreateModel(
            name='Workflow',
            fields=[
                ('workflow_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=120)),
            ],
            options={
                'db_table': 'workflow',
            },
        ),
        migrations.CreateModel(
            name='ChecklistItem',
            fields=[
                ('item_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('label', models.CharField(blank=True, max_length=240, null=True)),
                ('required', models.BooleanField(default=False)),
                ('checklist', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app1.checklist')),
            ],
            options={
                'db_table': 'checklist_item',
            },
        ),
        migrations.CreateModel(
            name='Floor',
            fields=[
                ('floor_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('floor_number', models.IntegerField()),
                ('building', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app1.building')),
            ],
            options={
                'db_table': 'floor',
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('location_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=160)),
                ('room_no', models.CharField(blank=True, max_length=40, null=True)),
                ('capacity', models.IntegerField(blank=True, null=True)),
                ('building', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app1.building')),
                ('floor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app1.floor')),
                ('family', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app1.locationfamily')),
                ('type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app1.locationtype')),
            ],
            options={
                'db_table': 'location',
            },
        ),
        migrations.CreateModel(
            name='GuestComment',
            fields=[
                ('comment_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('channel', models.CharField(max_length=20)),
                ('source', models.CharField(max_length=20)),
                ('rating', models.IntegerField(blank=True, null=True)),
                ('comment_text', models.TextField()),
                ('linked_flag', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('guest', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app1.guest')),
                ('location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app1.location')),
            ],
            options={
                'db_table': 'guest_comment',
            },
        ),
        migrations.CreateModel(
            name='BreakfastVoucher',
            fields=[
                ('voucher_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('customer_name', models.CharField(blank=True, max_length=160, null=True)),
                ('phone', models.CharField(blank=True, max_length=15, null=True)),
                ('email', models.CharField(blank=True, max_length=100, null=True)),
                ('room_no', models.CharField(blank=True, max_length=20, null=True)),
                ('qr_code', models.CharField(blank=True, max_length=255, null=True)),
                ('qty', models.IntegerField()),
                ('status', models.CharField(blank=True, max_length=20, null=True)),
                ('sent_whatsapp', models.BooleanField(default=False)),
                ('sent_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('guest', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app1.guest')),
                ('location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app1.location')),
            ],
            options={
                'db_table': 'breakfast_voucher',
            },
        ),
        migrations.CreateModel(
            name='RequestType',
            fields=[
                ('request_type_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('active', models.BooleanField(default=True)),
                ('checklist', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app1.checklist')),
                ('request_family', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app1.requestfamily')),
                ('work_family', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app1.workfamily')),
                ('workflow', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app1.workflow')),
            ],
            options={
                'db_table': 'request_type',
            },
        ),
        migrations.CreateModel(
            name='ServiceRequest',
            fields=[
                ('request_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('priority', models.CharField(blank=True, max_length=20, null=True)),
                ('status', models.CharField(blank=True, max_length=50, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('closed_at', models.DateTimeField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app1.location')),
                ('request_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app1.requesttype')),
                ('assignee_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='requests_assigned', to='app1.users')),
                ('requester_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='requests_made', to='app1.users')),
            ],
            options={
                'db_table': 'service_request',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='app1.users')),
                ('avatar_url', models.CharField(blank=True, max_length=255, null=True)),
                ('timezone', models.CharField(blank=True, max_length=100, null=True)),
                ('preferences', models.JSONField(blank=True, null=True)),
            ],
            options={
                'db_table': 'user_profile',
            },
        ),
        migrations.CreateModel(
            name='GymVisit',
            fields=[
                ('visit_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('visit_at', models.DateTimeField(blank=True, null=True)),
                ('notes', models.CharField(blank=True, max_length=240, null=True)),
                ('member', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app1.gymmember')),
                ('visitor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app1.gymvisitor')),
                ('checked_by_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app1.users')),
            ],
            options={
                'db_table': 'gym_visit',
            },
        ),
        migrations.CreateModel(
            name='BreakfastVoucherScan',
            fields=[
                ('scan_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('scanned_at', models.DateTimeField(auto_now_add=True)),
                ('source', models.CharField(blank=True, max_length=20, null=True)),
                ('voucher', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app1.breakfastvoucher')),
                ('scanned_by_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app1.users')),
            ],
            options={
                'db_table': 'breakfast_voucher_scan',
            },
        ),
        migrations.CreateModel(
            name='WorkflowStep',
            fields=[
                ('step_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('step_order', models.IntegerField()),
                ('name', models.CharField(max_length=120)),
                ('role_hint', models.CharField(blank=True, max_length=120, null=True)),
                ('workflow', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app1.workflow')),
            ],
            options={
                'db_table': 'workflow_step',
            },
        ),
        migrations.CreateModel(
            name='WorkflowTransition',
            fields=[
                ('transition_id', models.BigAutoField(primary_key=True, serialize=False)),
                ('condition_expr', models.JSONField(blank=True, null=True)),
                ('from_step', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='transitions_from', to='app1.workflowstep')),
                ('to_step', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='transitions_to', to='app1.workflowstep')),
            ],
            options={
                'db_table': 'workflow_transition',
            },
        ),
        migrations.CreateModel(
            name='UserGroupMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app1.usergroup')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app1.users')),
            ],
            options={
                'db_table': 'user_group_membership',
                'unique_together': {('user', 'group')},
            },
        ),
        migrations.CreateModel(
            name='ServiceRequestChecklist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('completed', models.BooleanField(default=False)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app1.checklistitem')),
                ('request', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app1.servicerequest')),
                ('completed_by_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app1.users')),
            ],
            options={
                'db_table': 'service_request_checklist',
                'unique_together': {('request', 'item')},
            },
        ),
        migrations.CreateModel(
            name='ServiceRequestStep',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(blank=True, max_length=20, null=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('request', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app1.servicerequest')),
                ('actor_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='app1.users')),
                ('step', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app1.workflowstep')),
            ],
            options={
                'db_table': 'service_request_step',
                'unique_together': {('request', 'step')},
            },
        ),
    ]
